---
# Source: karpenter-provider-proxmox/crds/karpenter.proxmox.sinextra.dev_proxmoxnodeclasses.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.1
  name: proxmoxnodeclasses.karpenter.proxmox.sinextra.dev
spec:
  group: karpenter.proxmox.sinextra.dev
  names:
    categories:
    - karpenter
    kind: ProxmoxNodeClass
    listKind: ProxmoxNodeClassList
    plural: proxmoxnodeclasses
    singular: proxmoxnodeclass
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.resources.zones
      name: Zones
      type: string
    - jsonPath: .spec.placementStrategy.zoneBalance
      name: Balance
      type: string
    - jsonPath: .spec.instanceTemplateRef.name
      name: Template
      type: string
    - jsonPath: .spec.metadataOptions.type
      name: Metadata
      type: string
    - jsonPath: .spec.bootDevice.size
      name: Disk
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ProxmoxNodeClass is the Schema for the ProxmoxNodeClass API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of ProxmoxNodeClass
            properties:
              bootDevice:
                default:
                  size: 30G
                description: |-
                  BootDevice defines the root device for the VM
                  If not specified, a block storage device will be used from the instance template.
                properties:
                  size:
                    allOf:
                    - pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    - pattern: ^\d+(T|G|Ti|Gi)$
                    anyOf:
                    - type: integer
                    - type: string
                    description: Size is the size of the block device in `Gi`, `G`,
                      `Ti`, or `T`
                    type: string
                    x-kubernetes-int-or-string: true
                  storage:
                    description: Storage is the proxmox storage-id to create the block
                      device
                    maxLength: 30
                    type: string
                type: object
              instanceTemplateRef:
                description: InstanceTemplateRef is the template reference for the
                  VM template
                properties:
                  kind:
                    description: 'Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"'
                    enum:
                    - ProxmoxTemplate
                    - ProxmoxUnmanagedTemplate
                    type: string
                  name:
                    description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    minLength: 1
                    type: string
                required:
                - kind
                - name
                type: object
              kubeletConfiguration:
                description: KubeletConfiguration defines kubelet config file
                properties:
                  allowedUnsafeSysctls:
                    description: |-
                      A comma separated whitelist of unsafe sysctls or sysctl patterns (ending in `*`).
                      Unsafe sysctl groups are `kernel.shm*`, `kernel.msg*`, `kernel.sem`, `fs.mqueue.*`,
                      and `net.*`. For example: "`kernel.msg*,net.ipv4.route.min_pmtu`"
                    items:
                      type: string
                    type: array
                  clusterDNS:
                    description: |-
                      ClusterDNS is a list of IP addresses for a cluster DNS server. If set,
                      kubelet will configure all containers to use this for DNS resolution
                      instead of the host's DNS servers.
                    items:
                      type: string
                    maxItems: 3
                    type: array
                  cpuCFSQuota:
                    description: CPUCFSQuota enables CPU CFS quota enforcement for
                      containers that specify CPU limits.
                    type: boolean
                  cpuCFSQuotaPeriod:
                    description: |-
                      cpuCFSQuotaPeriod sets the CPU CFS quota period value, `cpu.cfs_period_us`.
                      The value must be between 1 ms and 1 second, inclusive.
                    type: string
                  cpuManagerPolicy:
                    description: CPUManagerPolicy is the name of the policy to use.
                    enum:
                    - none
                    - static
                    type: string
                  failSwapOn:
                    description: FailSwapOn tells the Kubelet to fail to start if
                      swap is enabled on the node.
                    type: boolean
                  imageGCHighThresholdPercent:
                    description: |-
                      ImageGCHighThresholdPercent is the percent of disk usage after which image
                      garbage collection is always run. The percent is calculated by dividing this
                      field value by 100, so this field must be between 0 and 100, inclusive.
                      When specified, the value must be greater than ImageGCLowThresholdPercent.
                    format: int32
                    maximum: 100
                    minimum: 0
                    type: integer
                  imageGCLowThresholdPercent:
                    description: |-
                      ImageGCLowThresholdPercent is the percent of disk usage before which image
                      garbage collection is never run. Lowest disk usage to garbage collect to.
                      The percent is calculated by dividing this field value by 100,
                      so the field value must be between 0 and 100, inclusive.
                      When specified, the value must be less than imageGCHighThresholdPercent
                    format: int32
                    maximum: 100
                    minimum: 0
                    type: integer
                  maxPods:
                    description: |-
                      MaxPods is an override for the maximum number of pods that can run on
                      a worker node instance.
                    format: int32
                    maximum: 250
                    minimum: 10
                    type: integer
                  shutdownGracePeriod:
                    description: |-
                      ShutdownGracePeriod specifies the total duration that the node should delay the
                      shutdown and total grace period for pod termination during a node shutdown.
                    type: string
                  topologyManagerPolicy:
                    description: |-
                      TopologyManagerPolicy is the name of the topology manager policy to use.
                      Valid values include:

                      - `restricted`: kubelet only allows pods with optimal NUMA node alignment for requested resources;
                      - `best-effort`: kubelet will favor pods with NUMA alignment of CPU and device resources;
                      - `none`: kubelet has no knowledge of NUMA alignment of a pod's CPU and device resources.
                      - `single-numa-node`: kubelet only allows pods with a single NUMA alignment
                        of CPU and device resources.
                    enum:
                    - restricted
                    - best-effort
                    - none
                    - single-numa-node
                    type: string
                  topologyManagerScope:
                    description: |-
                      TopologyManagerScope represents the scope of topology hint generation
                      that topology manager requests and hint providers generate.
                      Valid values include:

                      - `container`: topology policy is applied on a per-container basis.
                      - `pod`: topology policy is applied on a per-pod basis.
                    enum:
                    - container
                    - pod
                    type: string
                type: object
              metadataOptions:
                default:
                  type: none
                description: MetadataOptions for the generated launch template of
                  provisioned nodes.
                properties:
                  templatesRef:
                    description: |-
                      templatesRef is a reference to the secret that contains cloud-init metadata templates.
                      Secret must contain the following keys, each key is optional:
                      - `user-data` - Userdata for cloud-init
                      - `meta-data` - Metadata for cloud-init
                      - `network-config` - Network configuration for cloud-init
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  type:
                    default: none
                    description: |-
                      If specified, the instance metadata will be exposed to the VMs by CDRom
                      or virtual machine template.
                    enum:
                    - none
                    - cdrom
                    type: string
                  valuesRef:
                    description: valuesRef is a reference to the secret that contains
                      cloud-init custom template values.
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                type: object
              placementStrategy:
                default:
                  zoneBalance: Balanced
                description: PlacementStrategy defines how nodes should be placed
                  across zones
                properties:
                  zoneBalance:
                    default: Balanced
                    description: |-
                      ZoneBalance determines how nodes are distributed across zones
                      Valid values are:
                      - "Balanced" (default) - Nodes are evenly distributed across zones
                      - "AvailabilityFirst" - Prioritize zone availability over even distribution
                    enum:
                    - Balanced
                    - AvailabilityFirst
                    type: string
                type: object
              region:
                description: Region is the Proxmox Cloud region where nodes will be
                  created
                minLength: 1
                type: string
              securityGroups:
                description: SecurityGroups to apply to the VMs
                items:
                  description: SecurityGroups defines a term to apply security groups
                  properties:
                    interface:
                      default: net0
                      description: Interface is the network interface to apply the
                        security group
                      pattern: net[0-9]+
                      type: string
                    name:
                      description: Name is the security group name in Proxmox.
                      maxLength: 30
                      type: string
                  required:
                  - name
                  type: object
                maxItems: 10
                type: array
              tags:
                description: Tags to apply to the VMs
                items:
                  type: string
                maxItems: 10
                type: array
            required:
            - instanceTemplateRef
            type: object
          status:
            description: Status defines the observed state of ProxmoxNodeClass
            properties:
              conditions:
                description: Conditions contains signals for health and readiness
                items:
                  description: Condition aliases the upstream type and adds additional
                    helper methods
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              resources:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Resources is the list of resources that have been provisioned.
                type: object
              selectedZones:
                description: |-
                  SelectedZones is a list of nodes that match this node class
                  It depends on instanceTemplate and region.
                  This field is populated by the controller and should not be set manually.
                items:
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: karpenter-provider-proxmox/crds/karpenter.proxmox.sinextra.dev_proxmoxtemplates.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.1
  name: proxmoxtemplates.karpenter.proxmox.sinextra.dev
spec:
  group: karpenter.proxmox.sinextra.dev
  names:
    categories:
    - karpenter
    kind: ProxmoxTemplate
    listKind: ProxmoxTemplateList
    plural: proxmoxtemplates
    singular: proxmoxtemplate
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.resources.zones
      name: Zones
      type: string
    - jsonPath: .spec.machine
      name: Machine
      type: string
    - jsonPath: .spec.cpu.type
      name: CPU
      type: string
    - jsonPath: .spec.vga.type
      name: VGA
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ProxmoxTemplate is the Schema for the ProxmoxTemplate API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of ProxmoxTemplate
            properties:
              cpu:
                default:
                  type: x86-64-v2-AES
                description: CPU configuration
                properties:
                  flags:
                    description: List of additional CPU flags
                    items:
                      type: string
                    maxItems: 10
                    type: array
                  type:
                    default: x86-64-v2-AES
                    description: Emulated CPU type.
                    enum:
                    - host
                    - kvm64
                    - x86-64-v2
                    - x86-64-v2-AES
                    - x86-64-v3
                    - x86-64-v4
                    type: string
                type: object
              description:
                description: Description for the VM template.
                minLength: 1
                type: string
              machine:
                default: q35
                description: Machine for the VM machine type.
                enum:
                - pc
                - q35
                type: string
              network:
                description: Network defines the network configuration for the VM
                  template
                items:
                  description: Network defines the network configuration for the VM
                    template
                  properties:
                    bridge:
                      description: Bridge to attach the network device to.
                      minLength: 1
                      type: string
                    firewall:
                      description: Whether this interface should be protected by the
                        firewall.
                      type: boolean
                    model:
                      default: virtio
                      description: Network Card Model.
                      enum:
                      - e1000
                      - e1000e
                      - rtl8139
                      - virtio
                      - vmxnet3
                      type: string
                    mtu:
                      default: 1500
                      description: Force MTU of network device.
                      type: integer
                      x-kubernetes-validations:
                      - rule: self == 1 || ( self >= 576 && self <= 65520)
                    name:
                      description: Name of the network interface.
                      minLength: 1
                      type: string
                    vlan:
                      description: VLAN tag to apply to packets on this interface.
                      maximum: 4094
                      minimum: 1
                      type: integer
                  required:
                  - bridge
                  type: object
                minItems: 1
                type: array
              region:
                description: Region is the Proxmox Cloud region where VM template
                  will be created
                minLength: 1
                type: string
              sourceImage:
                description: SourceImage defines the source image for the VM boot
                  disk.
                properties:
                  checksum:
                    description: Checksum is a hash of the checksum.
                    maxLength: 128
                    minLength: 32
                    type: string
                  checksumType:
                    description: ChecksumType is the algorithm to calculate the checksum
                      of the file.
                    enum:
                    - md5
                    - sha1
                    - sha224
                    - sha256
                    - sha384
                    - sha512
                    type: string
                  imageName:
                    description: ImageName is the prefix name of the destination image.
                    maxLength: 64
                    minLength: 1
                    type: string
                  url:
                    description: URL is the location of the source image.
                    pattern: ^https?://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(/\S*)?$
                    type: string
                required:
                - url
                type: object
              storageIDs:
                description: |-
                  StorageIDs is a list of storage IDs where the VM template and base image will be stored.
                  Storage should supports images and import content types.
                items:
                  type: string
                minItems: 1
                type: array
              tags:
                description: Tags to apply to the VM template
                items:
                  type: string
                maxItems: 10
                type: array
              vga:
                description: VGA configuration
                properties:
                  memory:
                    description: Sets the VGA memory in MiB.
                    maximum: 512
                    minimum: 4
                    type: integer
                  type:
                    default: std
                    description: Emulated VGA type.
                    enum:
                    - none
                    - serial0
                    - std
                    - vmware
                    type: string
                type: object
            required:
            - network
            - sourceImage
            - storageIDs
            type: object
          status:
            description: Status defines the observed state of ProxmoxTemplate
            properties:
              conditions:
                description: Conditions contains signals for health and readiness
                items:
                  description: Condition aliases the upstream type and adds additional
                    helper methods
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              imageID:
                description: ImageID is the ID of the image.
                type: string
              resources:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Resources is the list of resources that have been provisioned.
                type: object
              zones:
                description: |-
                  Zones is a list of nodes that VM template was prepared.
                  This field is populated by the controller and should not be set manually.
                items:
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: karpenter-provider-proxmox/crds/karpenter.proxmox.sinextra.dev_proxmoxunmanagedtemplates.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.1
  name: proxmoxunmanagedtemplates.karpenter.proxmox.sinextra.dev
spec:
  group: karpenter.proxmox.sinextra.dev
  names:
    categories:
    - karpenter
    kind: ProxmoxUnmanagedTemplate
    listKind: ProxmoxUnmanagedTemplateList
    plural: proxmoxunmanagedtemplates
    singular: proxmoxunmanagedtemplate
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.resources.zones
      name: Zones
      type: string
    - jsonPath: .spec.templateName
      name: Name
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ProxmoxUnmanagedTemplate is the Schema for the ProxmoxUnmanagedTemplate
          API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of ProxmoxUnmanagedTemplateSpec
            properties:
              region:
                description: Region is the Proxmox Cloud region where VM template
                  will be created
                minLength: 1
                type: string
              templateName:
                description: TemplateName is the name of the Proxmox template.
                minLength: 1
                type: string
            required:
            - templateName
            type: object
          status:
            description: Status defines the observed state of ProxmoxUnmanagedTemplate
            properties:
              conditions:
                description: Conditions contains signals for health and readiness
                items:
                  description: Condition aliases the upstream type and adds additional
                    helper methods
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              imageID:
                description: ImageID is the ID of the image.
                type: string
              resources:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Resources is the list of resources that have been provisioned.
                type: object
              zones:
                description: |-
                  Zones is a list of nodes that VM template was prepared.
                  This field is populated by the controller and should not be set manually.
                items:
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: karpenter-provider-proxmox/crds/karpenter.sh_nodeclaims.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.1
  name: nodeclaims.karpenter.sh
spec:
  group: karpenter.sh
  names:
    categories:
    - karpenter
    kind: NodeClaim
    listKind: NodeClaimList
    plural: nodeclaims
    singular: nodeclaim
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.labels.node\.kubernetes\.io/instance-type
      name: Type
      type: string
    - jsonPath: .metadata.labels.karpenter\.sh/capacity-type
      name: Capacity
      type: string
    - jsonPath: .metadata.labels.topology\.kubernetes\.io/zone
      name: Zone
      type: string
    - jsonPath: .status.nodeName
      name: Node
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.imageID
      name: ImageID
      priority: 1
      type: string
    - jsonPath: .status.providerID
      name: ID
      priority: 1
      type: string
    - jsonPath: .metadata.labels.karpenter\.sh/nodepool
      name: NodePool
      priority: 1
      type: string
    - jsonPath: .spec.nodeClassRef.name
      name: NodeClass
      priority: 1
      type: string
    - jsonPath: .status.conditions[?(@.type=="Drifted")].status
      name: Drifted
      priority: 1
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: NodeClaim is the Schema for the NodeClaims API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: NodeClaimSpec describes the desired state of the NodeClaim
            properties:
              expireAfter:
                default: 720h
                description: |-
                  ExpireAfter is the duration the controller will wait
                  before terminating a node, measured from when the node is created. This
                  is useful to implement features like eventually consistent node upgrade,
                  memory leak protection, and disruption testing.
                pattern: ^(([0-9]+(s|m|h))+|Never)$
                type: string
              nodeClassRef:
                description: NodeClassRef is a reference to an object that defines
                  provider specific configuration
                properties:
                  group:
                    description: API version of the referent
                    pattern: ^[^/]*$
                    type: string
                    x-kubernetes-validations:
                    - message: group may not be empty
                      rule: self != ''
                  kind:
                    description: 'Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"'
                    type: string
                    x-kubernetes-validations:
                    - message: kind may not be empty
                      rule: self != ''
                  name:
                    description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                    x-kubernetes-validations:
                    - message: name may not be empty
                      rule: self != ''
                required:
                - group
                - kind
                - name
                type: object
              requirements:
                description: Requirements are layered with GetLabels and applied to
                  every node.
                items:
                  description: |-
                    A node selector requirement with min values is a selector that contains values, a key, an operator that relates the key and values
                    and minValues that represent the requirement to have at least that many values.
                  properties:
                    key:
                      description: The label key that the selector applies to.
                      type: string
                    minValues:
                      description: |-
                        This field is ALPHA and can be dropped or replaced at any time
                        MinValues is the minimum number of unique values required to define the flexibility of the specific requirement.
                      maximum: 50
                      minimum: 1
                      type: integer
                    operator:
                      description: |-
                        Represents a key's relationship to a set of values.
                        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                      type: string
                    values:
                      description: |-
                        An array of string values. If the operator is In or NotIn,
                        the values array must be non-empty. If the operator is Exists or DoesNotExist,
                        the values array must be empty. If the operator is Gt or Lt, the values
                        array must have a single element, which will be interpreted as an integer.
                        This array is replaced during a strategic merge patch.
                      items:
                        type: string
                      type: array
                      x-kubernetes-list-type: atomic
                  required:
                  - key
                  - operator
                  type: object
                maxItems: 100
                type: array
                x-kubernetes-validations:
                - message: requirements with operator 'In' must have a value defined
                  rule: 'self.all(x, x.operator == ''In'' ? x.values.size() != 0 :
                    true)'
                - message: requirements operator 'Gt' or 'Lt' must have a single positive
                    integer value
                  rule: 'self.all(x, (x.operator == ''Gt'' || x.operator == ''Lt'')
                    ? (x.values.size() == 1 && int(x.values[0]) >= 0) : true)'
                - message: requirements with 'minValues' must have at least that many
                    values specified in the 'values' field
                  rule: 'self.all(x, (x.operator == ''In'' && has(x.minValues)) ?
                    x.values.size() >= x.minValues : true)'
              resources:
                description: Resources models the resource requirements for the NodeClaim
                  to launch
                properties:
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: Requests describes the minimum required resources
                      for the NodeClaim to launch
                    type: object
                type: object
              startupTaints:
                description: |-
                  StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically
                  within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by
                  daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning
                  purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.
                items:
                  description: |-
                    The node this Taint is attached to has the "effect" on
                    any pod that does not tolerate the Taint.
                  properties:
                    effect:
                      description: |-
                        Required. The effect of the taint on pods
                        that do not tolerate the taint.
                        Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Required. The taint key to be applied to a node.
                      type: string
                    timeAdded:
                      description: |-
                        TimeAdded represents the time at which the taint was added.
                        It is only written for NoExecute taints.
                      format: date-time
                      type: string
                    value:
                      description: The taint value corresponding to the taint key.
                      type: string
                  required:
                  - effect
                  - key
                  type: object
                type: array
              taints:
                description: Taints will be applied to the NodeClaim's node.
                items:
                  description: |-
                    The node this Taint is attached to has the "effect" on
                    any pod that does not tolerate the Taint.
                  properties:
                    effect:
                      description: |-
                        Required. The effect of the taint on pods
                        that do not tolerate the taint.
                        Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Required. The taint key to be applied to a node.
                      type: string
                    timeAdded:
                      description: |-
                        TimeAdded represents the time at which the taint was added.
                        It is only written for NoExecute taints.
                      format: date-time
                      type: string
                    value:
                      description: The taint value corresponding to the taint key.
                      type: string
                  required:
                  - effect
                  - key
                  type: object
                type: array
              terminationGracePeriod:
                description: |-
                  TerminationGracePeriod is the maximum duration the controller will wait before forcefully deleting the pods on a node, measured from when deletion is first initiated.

                  Warning: this feature takes precedence over a Pod's terminationGracePeriodSeconds value, and bypasses any blocked PDBs or the karpenter.sh/do-not-disrupt annotation.

                  This field is intended to be used by cluster administrators to enforce that nodes can be cycled within a given time period.
                  When set, drifted nodes will begin draining even if there are pods blocking eviction. Draining will respect PDBs and the do-not-disrupt annotation until the TGP is reached.

                  Karpenter will preemptively delete pods so their terminationGracePeriodSeconds align with the node's terminationGracePeriod.
                  If a pod would be terminated without being granted its full terminationGracePeriodSeconds prior to the node timeout,
                  that pod will be deleted at T = node timeout - pod terminationGracePeriodSeconds.

                  The feature can also be used to allow maximum time limits for long-running jobs which can delay node termination with preStop hooks.
                  If left undefined, the controller will wait indefinitely for pods to be drained.
                pattern: ^([0-9]+(s|m|h))+$
                type: string
            required:
            - nodeClassRef
            - requirements
            type: object
            x-kubernetes-validations:
            - message: spec is immutable
              rule: self == oldSelf
          status:
            description: NodeClaimStatus defines the observed state of NodeClaim
            properties:
              allocatable:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Allocatable is the estimated allocatable capacity of
                  the node
                type: object
              capacity:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Capacity is the estimated full capacity of the node
                type: object
              conditions:
                description: Conditions contains signals for health and readiness
                items:
                  description: Condition aliases the upstream type and adds additional
                    helper methods
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              imageID:
                description: ImageID is an identifier for the image that runs on the
                  node
                type: string
              lastPodEventTime:
                description: |-
                  LastPodEventTime is updated with the last time a pod was scheduled
                  or removed from the node. A pod going terminal or terminating
                  is also considered as removed.
                format: date-time
                type: string
              nodeName:
                description: NodeName is the name of the corresponding node object
                type: string
              providerID:
                description: ProviderID of the corresponding node object
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: karpenter-provider-proxmox/crds/karpenter.sh_nodepools.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.1
  name: nodepools.karpenter.sh
spec:
  group: karpenter.sh
  names:
    categories:
    - karpenter
    kind: NodePool
    listKind: NodePoolList
    plural: nodepools
    singular: nodepool
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.template.spec.nodeClassRef.name
      name: NodeClass
      type: string
    - jsonPath: .status.resources.nodes
      name: Nodes
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .spec.weight
      name: Weight
      priority: 1
      type: integer
    - jsonPath: .status.resources.cpu
      name: CPU
      priority: 1
      type: string
    - jsonPath: .status.resources.memory
      name: Memory
      priority: 1
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: NodePool is the Schema for the NodePools API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              NodePoolSpec is the top level nodepool specification. Nodepools
              launch nodes in response to pods that are unschedulable. A single nodepool
              is capable of managing a diverse set of nodes. Node properties are determined
              from a combination of nodepool and pod scheduling constraints.
            properties:
              disruption:
                default:
                  consolidateAfter: 0s
                description: Disruption contains the parameters that relate to Karpenter's
                  disruption logic
                properties:
                  budgets:
                    default:
                    - nodes: 10%
                    description: |-
                      Budgets is a list of Budgets.
                      If there are multiple active budgets, Karpenter uses
                      the most restrictive value. If left undefined,
                      this will default to one budget with a value to 10%.
                    items:
                      description: |-
                        Budget defines when Karpenter will restrict the
                        number of Node Claims that can be terminating simultaneously.
                      properties:
                        duration:
                          description: |-
                            Duration determines how long a Budget is active since each Schedule hit.
                            Only minutes and hours are accepted, as cron does not work in seconds.
                            If omitted, the budget is always active.
                            This is required if Schedule is set.
                            This regex has an optional 0s at the end since the duration.String() always adds
                            a 0s at the end.
                          pattern: ^((([0-9]+(h|m))|([0-9]+h[0-9]+m))(0s)?)$
                          type: string
                        nodes:
                          default: 10%
                          description: |-
                            Nodes dictates the maximum number of NodeClaims owned by this NodePool
                            that can be terminating at once. This is calculated by counting nodes that
                            have a deletion timestamp set, or are actively being deleted by Karpenter.
                            This field is required when specifying a budget.
                            This cannot be of type intstr.IntOrString since kubebuilder doesn't support pattern
                            checking for int nodes for IntOrString nodes.
                            Ref: https://github.com/kubernetes-sigs/controller-tools/blob/55efe4be40394a288216dab63156b0a64fb82929/pkg/crd/markers/validation.go#L379-L388
                          pattern: ^((100|[0-9]{1,2})%|[0-9]+)$
                          type: string
                        reasons:
                          description: |-
                            Reasons is a list of disruption methods that this budget applies to. If Reasons is not set, this budget applies to all methods.
                            Otherwise, this will apply to each reason defined.
                            allowed reasons are Underutilized, Empty, and Drifted.
                          items:
                            description: DisruptionReason defines valid reasons for
                              disruption budgets.
                            enum:
                            - Underutilized
                            - Empty
                            - Drifted
                            type: string
                          type: array
                        schedule:
                          description: |-
                            Schedule specifies when a budget begins being active, following
                            the upstream cronjob syntax. If omitted, the budget is always active.
                            Timezones are not supported.
                            This field is required if Duration is set.
                          pattern: ^(@(annually|yearly|monthly|weekly|daily|midnight|hourly))|((.+)\s(.+)\s(.+)\s(.+)\s(.+))$
                          type: string
                      required:
                      - nodes
                      type: object
                    maxItems: 50
                    type: array
                    x-kubernetes-validations:
                    - message: '''schedule'' must be set with ''duration'''
                      rule: self.all(x, has(x.schedule) == has(x.duration))
                  consolidateAfter:
                    description: |-
                      ConsolidateAfter is the duration the controller will wait
                      before attempting to terminate nodes that are underutilized.
                      Refer to ConsolidationPolicy for how underutilization is considered.
                    pattern: ^(([0-9]+(s|m|h))+|Never)$
                    type: string
                  consolidationPolicy:
                    default: WhenEmptyOrUnderutilized
                    description: |-
                      ConsolidationPolicy describes which nodes Karpenter can disrupt through its consolidation
                      algorithm. This policy defaults to "WhenEmptyOrUnderutilized" if not specified
                    enum:
                    - WhenEmpty
                    - WhenEmptyOrUnderutilized
                    type: string
                required:
                - consolidateAfter
                type: object
              limits:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Limits define a set of bounds for provisioning capacity.
                type: object
              template:
                description: |-
                  Template contains the template of possibilities for the provisioning logic to launch a NodeClaim with.
                  NodeClaims launched from this NodePool will often be further constrained than the template specifies.
                properties:
                  metadata:
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: |-
                          Annotations is an unstructured key value map stored with a resource that may be
                          set by external tools to store and retrieve arbitrary metadata. They are not
                          queryable and should be preserved when modifying objects.
                          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: |-
                          Map of string keys and values that can be used to organize and categorize
                          (scope and select) objects. May match selectors of replication controllers
                          and services.
                          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
                        type: object
                    type: object
                  spec:
                    description: |-
                      NodeClaimTemplateSpec describes the desired state of the NodeClaim in the Nodepool
                      NodeClaimTemplateSpec is used in the NodePool's NodeClaimTemplate, with the resource requests omitted since
                      users are not able to set resource requests in the NodePool.
                    properties:
                      expireAfter:
                        default: 720h
                        description: |-
                          ExpireAfter is the duration the controller will wait
                          before terminating a node, measured from when the node is created. This
                          is useful to implement features like eventually consistent node upgrade,
                          memory leak protection, and disruption testing.
                        pattern: ^(([0-9]+(s|m|h))+|Never)$
                        type: string
                      nodeClassRef:
                        description: NodeClassRef is a reference to an object that
                          defines provider specific configuration
                        properties:
                          group:
                            description: API version of the referent
                            pattern: ^[^/]*$
                            type: string
                            x-kubernetes-validations:
                            - message: group may not be empty
                              rule: self != ''
                          kind:
                            description: 'Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"'
                            type: string
                            x-kubernetes-validations:
                            - message: kind may not be empty
                              rule: self != ''
                          name:
                            description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                            type: string
                            x-kubernetes-validations:
                            - message: name may not be empty
                              rule: self != ''
                        required:
                        - group
                        - kind
                        - name
                        type: object
                        x-kubernetes-validations:
                        - message: nodeClassRef.group is immutable
                          rule: self.group == oldSelf.group
                        - message: nodeClassRef.kind is immutable
                          rule: self.kind == oldSelf.kind
                      requirements:
                        description: Requirements are layered with GetLabels and applied
                          to every node.
                        items:
                          description: |-
                            A node selector requirement with min values is a selector that contains values, a key, an operator that relates the key and values
                            and minValues that represent the requirement to have at least that many values.
                          properties:
                            key:
                              description: The label key that the selector applies
                                to.
                              type: string
                            minValues:
                              description: |-
                                This field is ALPHA and can be dropped or replaced at any time
                                MinValues is the minimum number of unique values required to define the flexibility of the specific requirement.
                              maximum: 50
                              minimum: 1
                              type: integer
                            operator:
                              description: |-
                                Represents a key's relationship to a set of values.
                                Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                              type: string
                            values:
                              description: |-
                                An array of string values. If the operator is In or NotIn,
                                the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. If the operator is Gt or Lt, the values
                                array must have a single element, which will be interpreted as an integer.
                                This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                          required:
                          - key
                          - operator
                          type: object
                        maxItems: 100
                        type: array
                        x-kubernetes-validations:
                        - message: requirements with operator 'In' must have a value
                            defined
                          rule: 'self.all(x, x.operator == ''In'' ? x.values.size()
                            != 0 : true)'
                        - message: requirements operator 'Gt' or 'Lt' must have a
                            single positive integer value
                          rule: 'self.all(x, (x.operator == ''Gt'' || x.operator ==
                            ''Lt'') ? (x.values.size() == 1 && int(x.values[0]) >=
                            0) : true)'
                        - message: requirements with 'minValues' must have at least
                            that many values specified in the 'values' field
                          rule: 'self.all(x, (x.operator == ''In'' && has(x.minValues))
                            ? x.values.size() >= x.minValues : true)'
                      startupTaints:
                        description: |-
                          StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically
                          within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by
                          daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning
                          purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.
                        items:
                          description: |-
                            The node this Taint is attached to has the "effect" on
                            any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: |-
                                Required. The effect of the taint on pods
                                that do not tolerate the taint.
                                Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: |-
                                TimeAdded represents the time at which the taint was added.
                                It is only written for NoExecute taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                      taints:
                        description: Taints will be applied to the NodeClaim's node.
                        items:
                          description: |-
                            The node this Taint is attached to has the "effect" on
                            any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: |-
                                Required. The effect of the taint on pods
                                that do not tolerate the taint.
                                Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: |-
                                TimeAdded represents the time at which the taint was added.
                                It is only written for NoExecute taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                      terminationGracePeriod:
                        description: |-
                          TerminationGracePeriod is the maximum duration the controller will wait before forcefully deleting the pods on a node, measured from when deletion is first initiated.

                          Warning: this feature takes precedence over a Pod's terminationGracePeriodSeconds value, and bypasses any blocked PDBs or the karpenter.sh/do-not-disrupt annotation.

                          This field is intended to be used by cluster administrators to enforce that nodes can be cycled within a given time period.
                          When set, drifted nodes will begin draining even if there are pods blocking eviction. Draining will respect PDBs and the do-not-disrupt annotation until the TGP is reached.

                          Karpenter will preemptively delete pods so their terminationGracePeriodSeconds align with the node's terminationGracePeriod.
                          If a pod would be terminated without being granted its full terminationGracePeriodSeconds prior to the node timeout,
                          that pod will be deleted at T = node timeout - pod terminationGracePeriodSeconds.

                          The feature can also be used to allow maximum time limits for long-running jobs which can delay node termination with preStop hooks.
                          If left undefined, the controller will wait indefinitely for pods to be drained.
                        pattern: ^([0-9]+(s|m|h))+$
                        type: string
                    required:
                    - nodeClassRef
                    - requirements
                    type: object
                required:
                - spec
                type: object
              weight:
                description: |-
                  Weight is the priority given to the nodepool during scheduling. A higher
                  numerical weight indicates that this nodepool will be ordered
                  ahead of other nodepools with lower weights. A nodepool with no weight
                  will be treated as if it is a nodepool with a weight of 0.
                format: int32
                maximum: 100
                minimum: 1
                type: integer
            required:
            - template
            type: object
          status:
            description: NodePoolStatus defines the observed state of NodePool
            properties:
              conditions:
                description: Conditions contains signals for health and readiness
                items:
                  description: Condition aliases the upstream type and adds additional
                    helper methods
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              nodeClassObservedGeneration:
                description: |-
                  NodeClassObservedGeneration represents the observed nodeClass generation for referenced nodeClass. If this does not match
                  the actual NodeClass Generation, NodeRegistrationHealthy status condition on the NodePool will be reset
                format: int64
                type: integer
              resources:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Resources is the list of resources that have been provisioned.
                type: object
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: karpenter-provider-proxmox/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karpenter-provider-proxmox
  labels:
    helm.sh/chart: karpenter-provider-proxmox-0.2.1
    app.kubernetes.io/name: karpenter-provider-proxmox
    app.kubernetes.io/instance: karpenter-provider-proxmox
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
  namespace: kube-system
---
# Source: karpenter-provider-proxmox/templates/clusterrole-core.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: karpenter-provider-proxmox-core
  labels:
    helm.sh/chart: karpenter-provider-proxmox-0.2.1
    app.kubernetes.io/name: karpenter-provider-proxmox
    app.kubernetes.io/instance: karpenter-provider-proxmox
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # Read
  - apiGroups: ["karpenter.sh"]
    resources: ["nodepools", "nodepools/status", "nodeclaims", "nodeclaims/status"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods", "nodes", "persistentvolumes", "persistentvolumeclaims", "replicationcontrollers", "namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes", "volumeattachments"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["list", "watch"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", list, "watch"]
  # Write
  - apiGroups: ["karpenter.sh"]
    resources: ["nodeclaims", "nodeclaims/status"]
    verbs: ["create", "delete", "update", "patch"]
  - apiGroups: ["karpenter.sh"]
    resources: ["nodepools", "nodepools/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["pods/eviction"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["delete"]
---
# Source: karpenter-provider-proxmox/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: karpenter-provider-proxmox
  labels:
    helm.sh/chart: karpenter-provider-proxmox-0.2.1
    app.kubernetes.io/name: karpenter-provider-proxmox
    app.kubernetes.io/instance: karpenter-provider-proxmox
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # Read
  - apiGroups: ["karpenter.proxmox.sinextra.dev"]
    resources: ["proxmoxnodeclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["karpenter.proxmox.sinextra.dev"]
    resources: ["proxmoxtemplates","proxmoxunmanagedtemplates"]
    verbs: ["get", "list", "watch"]
  # Write
  - apiGroups: ["karpenter.proxmox.sinextra.dev"]
    resources: ["proxmoxnodeclasses","proxmoxnodeclasses/status"]
    verbs: ["patch", "update"]
  - apiGroups: ["karpenter.proxmox.sinextra.dev"]
    resources: ["proxmoxtemplates","proxmoxtemplates/status","proxmoxunmanagedtemplates","proxmoxunmanagedtemplates/status"]
    verbs: ["patch", "update"]
---
# Source: karpenter-provider-proxmox/templates/clusterrole-core.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: karpenter-provider-proxmox-core
  labels:
    helm.sh/chart: karpenter-provider-proxmox-0.2.1
    app.kubernetes.io/name: karpenter-provider-proxmox
    app.kubernetes.io/instance: karpenter-provider-proxmox
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karpenter-provider-proxmox-core
subjects:
  - kind: ServiceAccount
    name: karpenter-provider-proxmox
    namespace: kube-system
---
# Source: karpenter-provider-proxmox/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: karpenter-provider-proxmox
  labels:
    helm.sh/chart: karpenter-provider-proxmox-0.2.1
    app.kubernetes.io/name: karpenter-provider-proxmox
    app.kubernetes.io/instance: karpenter-provider-proxmox
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karpenter-provider-proxmox
subjects:
  - kind: ServiceAccount
    name: karpenter-provider-proxmox
    namespace: kube-system
---
# Source: karpenter-provider-proxmox/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: karpenter-provider-proxmox
  namespace: kube-system
  labels:
    helm.sh/chart: karpenter-provider-proxmox-0.2.1
    app.kubernetes.io/name: karpenter-provider-proxmox
    app.kubernetes.io/instance: karpenter-provider-proxmox
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - watch
  - create
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - patch
  - update
  resourceNames:
  - proxmox-karpenter-leader-election
# Metadata templates options
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  resourceNames:
  - kube-root-ca.crt
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: karpenter-provider-proxmox/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: karpenter-provider-proxmox
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: karpenter-provider-proxmox
subjects:
- kind: ServiceAccount
  name: karpenter-provider-proxmox
  namespace: kube-system
---
# Source: karpenter-provider-proxmox/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karpenter-provider-proxmox
  namespace: kube-system
  labels:
    helm.sh/chart: karpenter-provider-proxmox-0.2.1
    app.kubernetes.io/name: karpenter-provider-proxmox
    app.kubernetes.io/instance: karpenter-provider-proxmox
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: karpenter-provider-proxmox
      app.kubernetes.io/instance: karpenter-provider-proxmox
  template:
    metadata:
      annotations:
        checksum/config: c69436cb1e16c36ff708b1003d3ca4c6ee6484d2524e2ba7d9b68f473acaa1ca
      labels:
        app.kubernetes.io/name: karpenter-provider-proxmox
        app.kubernetes.io/instance: karpenter-provider-proxmox
    spec:
      enableServiceLinks: false
      priorityClassName: system-cluster-critical
      serviceAccountName: karpenter-provider-proxmox
      securityContext:
        fsGroup: 65532
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      initContainers:
        []
      containers:
        - name: karpenter-provider-proxmox
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          image: "ghcr.io/sergelogvinov/karpenter-provider-proxmox:v0.4.0"
          imagePullPolicy: Always
          args:
            - -cloud-config=/etc/proxmox/config.yaml
            - -log-level=debug
            - -leader-election-name=proxmox-karpenter-leader-election
            - -health-probe-port=8081
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: karpenter-provider-proxmox
                  divisor: "0"
                  resource: limits.memory
            - name: FEATURE_GATES
              value: "ReservedCapacity=true,SpotToSpotConsolidation=false,NodeRepair=false"
            - name: BATCH_MAX_DURATION
              value: "10s"
            - name: BATCH_IDLE_DURATION
              value: "1s"
            - name: PREFERENCE_POLICY
              value: "Respect"
            - name: MIN_VALUES_POLICY
              value: "Strict"
            - name: VM_MEMORY_OVERHEAD_PERCENT
              value: "0.075"
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            null
          volumeMounts:
            - name: cloud-config
              mountPath: /etc/proxmox
              readOnly: true
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: karpenter-provider-proxmox
                    app.kubernetes.io/instance: karpenter-provider-proxmox
                topologyKey: topology.kubernetes.io/zone
              weight: 1
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: karpenter-provider-proxmox
              app.kubernetes.io/instance: karpenter-provider-proxmox
      volumes:
        - name: cloud-config
          secret:
            secretName: karpenter-provider-proxmox
            defaultMode: 416
